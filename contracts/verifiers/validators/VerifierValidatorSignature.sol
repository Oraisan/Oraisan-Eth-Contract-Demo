//
// Copyright 2017 Christian Reitwiessner
// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
// 2019 OKIMS
//      ported to solidity 0.6
//      fixed linter warnings
//      added requiere error messages
//
//
// SPDX-License-Identifier: GPL-3.0
pragma solidity ^0.8.0;
library Pairing {
    struct G1Point {
        uint X;
        uint Y;
    }
    // Encoding of field elements is: X[0] * z + X[1]
    struct G2Point {
        uint[2] X;
        uint[2] Y;
    }
    /// @return the generator of G1
    function P1() internal pure returns (G1Point memory) {
        return G1Point(1, 2);
    }
    /// @return the generator of G2
    function P2() internal pure returns (G2Point memory) {
        // Original code point
        return G2Point(
            [11559732032986387107991004021392285783925812861821192530917403151452391805634,
             10857046999023057135944570762232829481370756359578518086990519993285655852781],
            [4082367875863433681332203403145435568316851327593401208105741076214120093531,
             8495653923123431417604973247489272438418190587263600148770280649306958101930]
        );

/*
        // Changed by Jordi point
        return G2Point(
            [10857046999023057135944570762232829481370756359578518086990519993285655852781,
             11559732032986387107991004021392285783925812861821192530917403151452391805634],
            [8495653923123431417604973247489272438418190587263600148770280649306958101930,
             4082367875863433681332203403145435568316851327593401208105741076214120093531]
        );
*/
    }
    /// @return r the negation of p, i.e. p.addition(p.negate()) should be zero.
    function negate(G1Point memory p) internal pure returns (G1Point memory r) {
        // The prime q in the base field F_q for G1
        uint q = 21888242871839275222246405745257275088696311157297823662689037894645226208583;
        if (p.X == 0 && p.Y == 0)
            return G1Point(0, 0);
        return G1Point(p.X, q - (p.Y % q));
    }
    /// @return r the sum of two points of G1
    function addition(G1Point memory p1, G1Point memory p2) internal view returns (G1Point memory r) {
        uint[4] memory input;
        input[0] = p1.X;
        input[1] = p1.Y;
        input[2] = p2.X;
        input[3] = p2.Y;
        bool success;
        // solium-disable-next-line security/no-inline-assembly
        assembly {
            success := staticcall(sub(gas(), 2000), 6, input, 0xc0, r, 0x60)
            // Use "invalid" to make gas estimation work
            switch success case 0 { invalid() }
        }
        require(success,"pairing-add-failed");
    }
    /// @return r the product of a point on G1 and a scalar, i.e.
    /// p == p.scalar_mul(1) and p.addition(p) == p.scalar_mul(2) for all points p.
    function scalar_mul(G1Point memory p, uint s) internal view returns (G1Point memory r) {
        uint[3] memory input;
        input[0] = p.X;
        input[1] = p.Y;
        input[2] = s;
        bool success;
        // solium-disable-next-line security/no-inline-assembly
        assembly {
            success := staticcall(sub(gas(), 2000), 7, input, 0x80, r, 0x60)
            // Use "invalid" to make gas estimation work
            switch success case 0 { invalid() }
        }
        require (success,"pairing-mul-failed");
    }
    /// @return the result of computing the pairing check
    /// e(p1[0], p2[0]) *  .... * e(p1[n], p2[n]) == 1
    /// For example pairing([P1(), P1().negate()], [P2(), P2()]) should
    /// return true.
    function pairing(G1Point[] memory p1, G2Point[] memory p2) internal view returns (bool) {
        require(p1.length == p2.length,"pairing-lengths-failed");
        uint elements = p1.length;
        uint inputSize = elements * 6;
        uint[] memory input = new uint[](inputSize);
        for (uint i = 0; i < elements; i++)
        {
            input[i * 6 + 0] = p1[i].X;
            input[i * 6 + 1] = p1[i].Y;
            input[i * 6 + 2] = p2[i].X[0];
            input[i * 6 + 3] = p2[i].X[1];
            input[i * 6 + 4] = p2[i].Y[0];
            input[i * 6 + 5] = p2[i].Y[1];
        }
        uint[1] memory out;
        bool success;
        // solium-disable-next-line security/no-inline-assembly
        assembly {
            success := staticcall(sub(gas(), 2000), 8, add(input, 0x20), mul(inputSize, 0x20), out, 0x20)
            // Use "invalid" to make gas estimation work
            switch success case 0 { invalid() }
        }
        require(success,"pairing-opcode-failed");
        return out[0] != 0;
    }
    /// Convenience method for a pairing check for two pairs.
    function pairingProd2(G1Point memory a1, G2Point memory a2, G1Point memory b1, G2Point memory b2) internal view returns (bool) {
        G1Point[] memory p1 = new G1Point[](2);
        G2Point[] memory p2 = new G2Point[](2);
        p1[0] = a1;
        p1[1] = b1;
        p2[0] = a2;
        p2[1] = b2;
        return pairing(p1, p2);
    }
    /// Convenience method for a pairing check for three pairs.
    function pairingProd3(
            G1Point memory a1, G2Point memory a2,
            G1Point memory b1, G2Point memory b2,
            G1Point memory c1, G2Point memory c2
    ) internal view returns (bool) {
        G1Point[] memory p1 = new G1Point[](3);
        G2Point[] memory p2 = new G2Point[](3);
        p1[0] = a1;
        p1[1] = b1;
        p1[2] = c1;
        p2[0] = a2;
        p2[1] = b2;
        p2[2] = c2;
        return pairing(p1, p2);
    }
    /// Convenience method for a pairing check for four pairs.
    function pairingProd4(
            G1Point memory a1, G2Point memory a2,
            G1Point memory b1, G2Point memory b2,
            G1Point memory c1, G2Point memory c2,
            G1Point memory d1, G2Point memory d2
    ) internal view returns (bool) {
        G1Point[] memory p1 = new G1Point[](4);
        G2Point[] memory p2 = new G2Point[](4);
        p1[0] = a1;
        p1[1] = b1;
        p1[2] = c1;
        p1[3] = d1;
        p2[0] = a2;
        p2[1] = b2;
        p2[2] = c2;
        p2[3] = d2;
        return pairing(p1, p2);
    }
}
contract VerifierValidatorSignature {
    using Pairing for *;
    struct VerifyingKey {
        Pairing.G1Point alfa1;
        Pairing.G2Point beta2;
        Pairing.G2Point gamma2;
        Pairing.G2Point delta2;
        Pairing.G1Point[] IC;
    }
    struct Proof {
        Pairing.G1Point A;
        Pairing.G2Point B;
        Pairing.G1Point C;
    }
    function verifyingKey() internal pure returns (VerifyingKey memory vk) {
        vk.alfa1 = Pairing.G1Point(
            20491192805390485299153009773594534940189261866228447918068658471970481763042,
            9383485363053290200918347156157836566562967994039712273449902621266178545958
        );

        vk.beta2 = Pairing.G2Point(
            [4252822878758300859123897981450591353533073413197771768651442665752259397132,
             6375614351688725206403948262868962793625744043794305715222011528459656738731],
            [21847035105528745403288232691147584728191162732299865338377159692350059136679,
             10505242626370262277552901082094356697409835680220590971873171140371331206856]
        );
        vk.gamma2 = Pairing.G2Point(
            [11559732032986387107991004021392285783925812861821192530917403151452391805634,
             10857046999023057135944570762232829481370756359578518086990519993285655852781],
            [4082367875863433681332203403145435568316851327593401208105741076214120093531,
             8495653923123431417604973247489272438418190587263600148770280649306958101930]
        );
        vk.delta2 = Pairing.G2Point(
            [11559732032986387107991004021392285783925812861821192530917403151452391805634,
             10857046999023057135944570762232829481370756359578518086990519993285655852781],
            [4082367875863433681332203403145435568316851327593401208105741076214120093531,
             8495653923123431417604973247489272438418190587263600148770280649306958101930]
        );
        vk.IC = new Pairing.G1Point[](131);
        
        vk.IC[0] = Pairing.G1Point( 
            16317808168961945832037519470481723547491128415360175732708760238633782558631,
            13140237536424385958744830435096387978579252876891548870459178996313779644320
        );                                      
        
        vk.IC[1] = Pairing.G1Point( 
            17453205190159884425019607427770552751288280224894116796216567486862571359468,
            681950185989909035806376779892015629401905516543725109841289860666945230222
        );                                      
        
        vk.IC[2] = Pairing.G1Point( 
            9709090226594378952573922337899208194609768514747026303591532283128951829612,
            20849632257157779009706598722153960887659070668245324544167890397439020762131
        );                                      
        
        vk.IC[3] = Pairing.G1Point( 
            16156640214363377062617333744526010366347940014629731693204472563110697460226,
            778858663698048376649969715751241439437452457010534776842330493754860701502
        );                                      
        
        vk.IC[4] = Pairing.G1Point( 
            14760780728537243343535465076685771394025253087191569053836144269101992140219,
            11901813975872407430179927323517867507032698858100712513673651525367895644659
        );                                      
        
        vk.IC[5] = Pairing.G1Point( 
            9104180250343774843596392105494606955655081666624640057865046244472123119144,
            5654457518597182743535213004897493705905007018241767868955570263287580711980
        );                                      
        
        vk.IC[6] = Pairing.G1Point( 
            5623550707240339257179459931074953759590413679236932076990476149210277590218,
            14344107518522912533046084215426753923479803326094978240507779954867659504457
        );                                      
        
        vk.IC[7] = Pairing.G1Point( 
            8767226135852225843661510222631374578023836582256942563074932915267983743176,
            17855387790331212409826111650889154310205339062320412893748295501252291070019
        );                                      
        
        vk.IC[8] = Pairing.G1Point( 
            9438980404698207701977770613159520864693750182822345602163711842312296524044,
            17789711452243066205712462940057058190396334348056306007422712951922777475095
        );                                      
        
        vk.IC[9] = Pairing.G1Point( 
            4581752027790590305547890938267536449325939949750834527486953509774765475275,
            4811678210055698134032092785482703581973835079424453881810946426797375676777
        );                                      
        
        vk.IC[10] = Pairing.G1Point( 
            17338575125553141435700084894110071088967141326969267347348505003885563045638,
            11573418055638133527258777072912671168161967512611549189991146524946485367224
        );                                      
        
        vk.IC[11] = Pairing.G1Point( 
            2432165675152466667889179101977665991563852100354072058035892269804989977799,
            12245381377382466952896426311099030472934417971526110111551683641676448913044
        );                                      
        
        vk.IC[12] = Pairing.G1Point( 
            4172399033190676694113926583214625282227921932972929264680920728072192666987,
            10060110690712493309293435999282255067690914882839416198746156193472313791224
        );                                      
        
        vk.IC[13] = Pairing.G1Point( 
            19171120331879055654869202329506160241787113586234536542571235015409728765076,
            8188791513791059535838988959763392952664609947648380567371287989924775312852
        );                                      
        
        vk.IC[14] = Pairing.G1Point( 
            1316481804315022308477959603479131518418334403035055633392107725724944145528,
            4999957328115127800431604041424689761126397260024589471823687527589461393621
        );                                      
        
        vk.IC[15] = Pairing.G1Point( 
            6822418152396416697980146337095541727758735853311788685558253181583476695766,
            3988083287751037305664195495136722452592893232001157493706142563553972269210
        );                                      
        
        vk.IC[16] = Pairing.G1Point( 
            10949626278154834577287411461358018221712954056737110487089332828234636578779,
            5039389526958779225921093929656498151293688604204708412308617181776958419265
        );                                      
        
        vk.IC[17] = Pairing.G1Point( 
            15507539607723958524072615343444896267500471582289576828285372046835164339848,
            2435491445224857455695657690164770686562860815216071657276094586946485336272
        );                                      
        
        vk.IC[18] = Pairing.G1Point( 
            4499432267842233180201588605469037007166217508233293295296757013466684694490,
            13098153772858124001350017950075525836365701840507482901157546143031640377792
        );                                      
        
        vk.IC[19] = Pairing.G1Point( 
            3939570910551670108621719608707251309006223272339433092459876420881601502059,
            13168746523851693985349364893458607625522713958252154840599612145882282975692
        );                                      
        
        vk.IC[20] = Pairing.G1Point( 
            15382887110439618993797123320323707434051176267223829484989705420151350773644,
            19292714186755438580190188341654965909449766673971512229802330969127426063190
        );                                      
        
        vk.IC[21] = Pairing.G1Point( 
            3814745282342960032316821027511497794710414784243468347919226736968650183586,
            20251202789308037183319059101240772135209269629737281769249456260641439145865
        );                                      
        
        vk.IC[22] = Pairing.G1Point( 
            4484382387501217954449913494920142139708095169158790543211284689199734166635,
            11799361915297056626860774905233917512141320945582251542880293399230018542048
        );                                      
        
        vk.IC[23] = Pairing.G1Point( 
            5966555512024800718598036409120752181745708225783930657719497891026900266718,
            13942758115129667856400993503175342317286487742785303057081045806481346114358
        );                                      
        
        vk.IC[24] = Pairing.G1Point( 
            603053896779771822082216062539570273096610279183638018602367243339673285421,
            8876840584479268821078697545149645524115435781369070107749337942424410917914
        );                                      
        
        vk.IC[25] = Pairing.G1Point( 
            11311757525554035226904427788185610128294577761943430493227137915197691776952,
            21696907333597904524150031010747455564673934275160403236872697054686024442534
        );                                      
        
        vk.IC[26] = Pairing.G1Point( 
            10431751162446741606372141806431380775629091422639029620337582533089628934171,
            9403274679151616669225172239411079333348104778651942062826065691301497155888
        );                                      
        
        vk.IC[27] = Pairing.G1Point( 
            14206169820072321209221568781615296714465555103159193400374133003105487075353,
            3586986957494511723946911470849187847097452211986559930514202045756839340809
        );                                      
        
        vk.IC[28] = Pairing.G1Point( 
            1374308860606908379081441893454724878070594087439633912318973693071817927978,
            21685033862338357647759417910246581835750855281247803045309197533901723016360
        );                                      
        
        vk.IC[29] = Pairing.G1Point( 
            16570743433723176876372164631526338297225759790525798623131543066798275015600,
            6636998001067423666501719746241923126226465401995244328335062006312298762205
        );                                      
        
        vk.IC[30] = Pairing.G1Point( 
            3447748512742635648672251373575044108330594967336644090800116680673504266471,
            21415407787377515215494339602661976659057941775265770999108467054264257436878
        );                                      
        
        vk.IC[31] = Pairing.G1Point( 
            4821416949316892018581142111005806814353919907466073597371931104492228576384,
            19480707290506733501872098603355483964964762295145248730858092322396823703651
        );                                      
        
        vk.IC[32] = Pairing.G1Point( 
            21271033818356808085003944377119908043615540821860274156249605170915080966928,
            20917768397446073011426569302840141020381455564279425915448418331658727697595
        );                                      
        
        vk.IC[33] = Pairing.G1Point( 
            13693425532250986670896229490751893021646847364806742550032463988688242233688,
            12294067302635248452032888422449653830347743449187730594800969022988857465701
        );                                      
        
        vk.IC[34] = Pairing.G1Point( 
            5483305560889056264683768222989689071365232358905616071121407866621408534216,
            10121153581719238193781587793049357994085078536937267735052342540437281105663
        );                                      
        
        vk.IC[35] = Pairing.G1Point( 
            4281476958145648785284696112181502121046162451629705591347334700787916784119,
            9292876556734750090547454842497672858972431149109259267668226913554817553515
        );                                      
        
        vk.IC[36] = Pairing.G1Point( 
            10251976081809695301277653463033912579497020186582717755069980792057592340947,
            11198567894052593231604527716070339919559008256505728237524777757081282129007
        );                                      
        
        vk.IC[37] = Pairing.G1Point( 
            4017547717596421252614301835031003539857094990114659796965854359010995729751,
            17908902522477381716952245684525690051277470944864546037349181440800478676473
        );                                      
        
        vk.IC[38] = Pairing.G1Point( 
            16944693292932466796277980096264196241520376893027473406352877253626884802903,
            15028588802133104931808296646565746908184751181370256510265266131309064836790
        );                                      
        
        vk.IC[39] = Pairing.G1Point( 
            20169105304135423420284278581406306187047520388954424137098719208795738462100,
            18911401391925170659403571256066982090531073472928490424057366711362611913675
        );                                      
        
        vk.IC[40] = Pairing.G1Point( 
            20454667968751364812931920269630798592659617668063488269439879346361956994462,
            5209831768250027335293694517878318083266081276527574242910991824585102424143
        );                                      
        
        vk.IC[41] = Pairing.G1Point( 
            7502519534936289075883176982406402250001115296832190219897905423709033874539,
            9192308562099859246743855226004997391611274296736254176857974260457655699783
        );                                      
        
        vk.IC[42] = Pairing.G1Point( 
            12598293767086939276739458373267936495316716184074040599019809062590404111165,
            19897982923616460177980531754925218536076316208990971746936746408339774823434
        );                                      
        
        vk.IC[43] = Pairing.G1Point( 
            10181037940078605608475539940809267869354500759942301941574764632960517607114,
            18940433380266582940555845929635716261408737516507778719359650347680637741456
        );                                      
        
        vk.IC[44] = Pairing.G1Point( 
            16698603633479381787482237519728377437748338227828281982137302751115571071177,
            18023367040734134985516060880191655123698473168837646799596261037211984795056
        );                                      
        
        vk.IC[45] = Pairing.G1Point( 
            15577780114648629764988370582686257499670657002501151930667006074510864218109,
            19620479352348176120478541432804370740099857626915242092260365234330015674172
        );                                      
        
        vk.IC[46] = Pairing.G1Point( 
            6444757117689321532042430480621739149137910600434616345374634737996284406702,
            2777650531007658483993365834571571167886294599626677072136146199654186713443
        );                                      
        
        vk.IC[47] = Pairing.G1Point( 
            8209392102201605017353699165144439543880905452113602062483201960984868409238,
            18544750931542693608518197084557642339072092957381555672958778334080102629749
        );                                      
        
        vk.IC[48] = Pairing.G1Point( 
            9911053725763964231893978564418896032623451453013919936831761093784511443515,
            20467290472170140217401682068670379624595288710621262511282385097338008293444
        );                                      
        
        vk.IC[49] = Pairing.G1Point( 
            19624055371025257209219739498163219074178145429134623116321691584647066489871,
            11136017841428964355177390919271612390477109354861881662355194181834672379783
        );                                      
        
        vk.IC[50] = Pairing.G1Point( 
            6393423065138659495653528255972387731935297903446099070397168889989290200507,
            19226583594313976367937389145763732079343764618888916906508087534569872321992
        );                                      
        
        vk.IC[51] = Pairing.G1Point( 
            4626969400835024920345279106930533250124709543247110583333192381272234254943,
            3373822434420144637183478183442964768105307908866790509166256072455034014093
        );                                      
        
        vk.IC[52] = Pairing.G1Point( 
            6508158819738472565290998748558426016822437266915052528744197500914352892831,
            17504328960567957703343957894289734066028510262001395825254282137667319175278
        );                                      
        
        vk.IC[53] = Pairing.G1Point( 
            880134606965538278499171110503594692712755037268184905101487357849161184003,
            5624803071804024626704866235943090146711261121232927264256343064614131698609
        );                                      
        
        vk.IC[54] = Pairing.G1Point( 
            3577435521716677877031145560142237366002998241702755938213124582441860564796,
            17637840175778899681740342519433269211549274864964993196846026320728486798167
        );                                      
        
        vk.IC[55] = Pairing.G1Point( 
            10964300483401675336352246261267005321705283165583197234540217424682307550469,
            17101595696082422800033621601455574650173078350133431072537562127570929737537
        );                                      
        
        vk.IC[56] = Pairing.G1Point( 
            4053672088670504243473922800705298214208881000289159222415123875544292930988,
            7846583989142405402933426996323957628239303282038356986529107503364559200414
        );                                      
        
        vk.IC[57] = Pairing.G1Point( 
            13026264558728523502016181516668543763697848130661515911608432491586429795320,
            14342639421752291034481339344440628696437406646817266622283737443392838029837
        );                                      
        
        vk.IC[58] = Pairing.G1Point( 
            17759042310633887780954832732626373687515254405067005157330393096427974303824,
            99432472712521366504960529020870539888554210342186357910703832331806271885
        );                                      
        
        vk.IC[59] = Pairing.G1Point( 
            13276172302967852607205671411384967161672840275829723172956276188397038242823,
            1372175904153366819251784321348254360871468411514503329135328680017839877291
        );                                      
        
        vk.IC[60] = Pairing.G1Point( 
            14551952178785409917186577788752073330378774348131565393626012850009050078790,
            5686827122350586041341105301313378781100190213325382296487175176126120742219
        );                                      
        
        vk.IC[61] = Pairing.G1Point( 
            15280540673320655127155130660277704217415023395273969984298573071498203950116,
            10308271917047144409372008632576582747150307297702338066330386379051872499481
        );                                      
        
        vk.IC[62] = Pairing.G1Point( 
            13687242296818325899298751502789313686522813286447376071767013934347504943484,
            18715770558648819072012034439332502001067512957088842339797916463396002557076
        );                                      
        
        vk.IC[63] = Pairing.G1Point( 
            17001216689685612120293213769123499114027284308248001356980873431763562672278,
            19659715877969703145652573564990163113043222717886967502895946208968604748826
        );                                      
        
        vk.IC[64] = Pairing.G1Point( 
            15500692356396230002662252419496163820835439193398580945503047702571913597404,
            4837385477678101549475888910670643848559484670503557820533725469453019541202
        );                                      
        
        vk.IC[65] = Pairing.G1Point( 
            8194414883177815045786998179774010279369299405357105905948068280399718152682,
            15575872253967858788067894029513152579973197683865450480173748163537752937572
        );                                      
        
        vk.IC[66] = Pairing.G1Point( 
            20995743955317202856419752073640118786551564261996529882329973547109606967737,
            1110250599879603567011435196645767617486025440605361939877084973434561372876
        );                                      
        
        vk.IC[67] = Pairing.G1Point( 
            21557863738205954877920240945866273388758415629388950097220584675446387062722,
            21277988937517719434509831232726451168230585465453011193717662144404279984232
        );                                      
        
        vk.IC[68] = Pairing.G1Point( 
            2795856565958532382408242130874210459844644858163109586661889116342686068018,
            12293641989624199636297216039564982860649200396172437162111561194016906048903
        );                                      
        
        vk.IC[69] = Pairing.G1Point( 
            20532327368635245316580749944867835702207098313169655165737464728781258850382,
            4324946186726866180249168257680095435950860734386739884539293306048983457111
        );                                      
        
        vk.IC[70] = Pairing.G1Point( 
            2765588312956961003432299812591408093084855464953757384626706639527830166660,
            18960061032762041772203948378769032398505013402343481244290377636692916752286
        );                                      
        
        vk.IC[71] = Pairing.G1Point( 
            21650853952284338553786138419241168870768390437093115404776121818427901233617,
            21642769309184604889403961958573944508026536936620153734770536845047996753126
        );                                      
        
        vk.IC[72] = Pairing.G1Point( 
            21814282625640563837018094005632130866135909241614213863921706812854793581329,
            3557487936317202460951711389753274230894970118296367986054230503764677389523
        );                                      
        
        vk.IC[73] = Pairing.G1Point( 
            11870363840808061153853284523123622090999067189179248941350818804590877284804,
            8808558941583968115103750725411569703285487832074492696945864734635822377190
        );                                      
        
        vk.IC[74] = Pairing.G1Point( 
            4597964253509411343880040777207072102103176614772068084366751889682984549129,
            18044309092032053815649429255543941319370605325205936197644113980007164823722
        );                                      
        
        vk.IC[75] = Pairing.G1Point( 
            3423823168137233919507195854907919968344615296333342854260784551470598477521,
            1420835568328022232435480412054506909068500327499403467055838708172662705250
        );                                      
        
        vk.IC[76] = Pairing.G1Point( 
            13113744807044388446890565462436615508635872483692539023783930247074388807134,
            20237717475525610666539877001240396673051364537494007757597505151399691755539
        );                                      
        
        vk.IC[77] = Pairing.G1Point( 
            8953842438047034687098032654114447499915695463224362141809241573230009662489,
            21541423735748791249440240716256024099519319128634030071073883943896217167059
        );                                      
        
        vk.IC[78] = Pairing.G1Point( 
            7145157370873009317910142046605205535426030598442080982005904862049007573723,
            10993548216482290609900157099555019401129981662548555114609870027921379324030
        );                                      
        
        vk.IC[79] = Pairing.G1Point( 
            107277906056313799357505721439670164071947624542118933545307878121256531164,
            9086152558023786575178601165895200991121298031653684738506920511436742532531
        );                                      
        
        vk.IC[80] = Pairing.G1Point( 
            2310024109992424382265753990610172915308928352990479396288031745701181874976,
            4795333067264383807700309815999163753048187405988219543264544999533151113455
        );                                      
        
        vk.IC[81] = Pairing.G1Point( 
            7016542736314867971588713845715362096011661701962339240759447785664413359830,
            11378808882442179115173148596748164310879481735782776975413453343224763508337
        );                                      
        
        vk.IC[82] = Pairing.G1Point( 
            7334546451875293525011807244096183587260826885948624501251925023871035286740,
            14495469863658823557299804285966139659988447245984277754119138895921862467662
        );                                      
        
        vk.IC[83] = Pairing.G1Point( 
            553605739280609774090219782237567601472232579161484891460418247172676402944,
            21431569719890611203174589303254547302640489038211078115212393292769813347122
        );                                      
        
        vk.IC[84] = Pairing.G1Point( 
            1752246262569163638802126137616453985219311018950922656820303075977017458305,
            367381225170400959957507875214171050691770675216141654726074403692182043297
        );                                      
        
        vk.IC[85] = Pairing.G1Point( 
            7823383334497382427362511295421415810435609248314937053822859294834708327073,
            637056289912805397086236896867394456673923246055822818202907190911633165778
        );                                      
        
        vk.IC[86] = Pairing.G1Point( 
            13689630787155350451606474409542671955341564073053968003891078703465786007731,
            10239172728481997877430777134099643423527525663737450421588577416331201793884
        );                                      
        
        vk.IC[87] = Pairing.G1Point( 
            2614318174796365544860373118658177755242226716773321679396189078127992879159,
            11214810750249521870247153651562588356251477467837929406851313256474077754332
        );                                      
        
        vk.IC[88] = Pairing.G1Point( 
            15946667456558971826922546204250308956839230923424702110768767576810068018707,
            19467155187478501730867768815123641425602839121942105002427535983847941424088
        );                                      
        
        vk.IC[89] = Pairing.G1Point( 
            778001279544541958980640601674632117227210166838021905383707433403225631410,
            20520467127216258935695122683953212174903121418831420981602595165038757468428
        );                                      
        
        vk.IC[90] = Pairing.G1Point( 
            12808275144040748772343526811149871211077384569945530577886830110375930710820,
            13505723889267222070351419236821829652665599326161081764328399396581733210109
        );                                      
        
        vk.IC[91] = Pairing.G1Point( 
            21688100659206269252129170516953625776106779801521252639067564558546321205415,
            14948476059627911501782749262868049344770999444225003051034453984819903985875
        );                                      
        
        vk.IC[92] = Pairing.G1Point( 
            19282582590287562183455364757980852011870907106817540473562040014747360712556,
            945189752782579947842269056105824701454123046905268365570971852627194157274
        );                                      
        
        vk.IC[93] = Pairing.G1Point( 
            16109719849032234756645528810819358683722451196805599165246725203408260659021,
            754164628245062414241579822599078095314639056226076721611988293474909208404
        );                                      
        
        vk.IC[94] = Pairing.G1Point( 
            18627529933103030508593314493066664060809156591341586460910911153337711728189,
            9214385824053380195931263278853023207545907399170448589995899503332290816726
        );                                      
        
        vk.IC[95] = Pairing.G1Point( 
            9330994147700744906602424858748257191358459353358073345438529455482870778232,
            18641365529399022704516155773713537319970523453739316424551482659944697127457
        );                                      
        
        vk.IC[96] = Pairing.G1Point( 
            16978870167235827389817349851264996318594407229870698830294072556136716689053,
            10432550702435233682044496530798726471974998767080020504949070964884298295624
        );                                      
        
        vk.IC[97] = Pairing.G1Point( 
            20579180909114746976230984216904946427101384027074239882284612563130800916743,
            18243549000318802650697398829305559261421547340727333156209024461619092568999
        );                                      
        
        vk.IC[98] = Pairing.G1Point( 
            7039372529640227122285962582999352501673368283361874055049609548404239694316,
            13121794213253230362773264198507260528453050179747566967151214964181941851708
        );                                      
        
        vk.IC[99] = Pairing.G1Point( 
            7841890465699556871507424478464754894102613590879051574209879338429007269375,
            19514094804051939462692031251641633200750571912486221418258418001854672280644
        );                                      
        
        vk.IC[100] = Pairing.G1Point( 
            12612415054790487318836834950506825993609986843149171655827407288513872770069,
            10292425399613870339476828922449288061264607843041760949698614793318791560957
        );                                      
        
        vk.IC[101] = Pairing.G1Point( 
            13860679348534125984269123805916240822468760962153077526082109742618647067930,
            4609700121617594772728178845374046945703724302843341070476409604212732821916
        );                                      
        
        vk.IC[102] = Pairing.G1Point( 
            9028205664572392111180341106025902808911553856556162548268836568601121280537,
            12095865509326843649444722408274669310058646027118174604426981105939009283056
        );                                      
        
        vk.IC[103] = Pairing.G1Point( 
            8826862460945986870075435940683621521639300418071653164608761036976415821450,
            2296425796055823307987261371904993106989841492592590973029201039407798549116
        );                                      
        
        vk.IC[104] = Pairing.G1Point( 
            1837107923017783234495485716818719458276733790482495814880968414812710448296,
            840709486823626315743751294276089875700481946214004195625623819000453470317
        );                                      
        
        vk.IC[105] = Pairing.G1Point( 
            19606181170651301137778761353639954793417756527014292047014483370415648626600,
            13100690800967329745347694123313137641212180982783625429680281913780116130143
        );                                      
        
        vk.IC[106] = Pairing.G1Point( 
            7043147804083348589962577049651511267212630706027507000231225884219207333563,
            4965278757468174692711119592692995462561438644561696945086292641587496691345
        );                                      
        
        vk.IC[107] = Pairing.G1Point( 
            20778611973722272280600781101361661358187040545384820598580311140189598834189,
            21443448439288540690431583826795079084844134103385554448606938399964810422314
        );                                      
        
        vk.IC[108] = Pairing.G1Point( 
            61891828086227100786284382652552248617600968781382681300942641908522423897,
            18023824447070440747875120033976631084555624934039644660197163496629268619371
        );                                      
        
        vk.IC[109] = Pairing.G1Point( 
            6723547061551440688842830716906672287704943113045285769461791364548334435599,
            161869964559745125930150527240030627863752205597063048696140949222134310080
        );                                      
        
        vk.IC[110] = Pairing.G1Point( 
            8368991157035260630655759692538177615357462163841697473869614345020789489360,
            2100114343392734521909552191059232163117086048052211946132577725566937616357
        );                                      
        
        vk.IC[111] = Pairing.G1Point( 
            12235489736163447200821272573737750259417643013983534856281551723366898140152,
            17994365817516838297951796419757870341332524453917098573648009557958161323861
        );                                      
        
        vk.IC[112] = Pairing.G1Point( 
            21191009168835672634547670402185201713176228818909380687475616691406852136319,
            14993092392043521943653373893406744870077876683446314669647563945303398256862
        );                                      
        
        vk.IC[113] = Pairing.G1Point( 
            14217398004018192791456224400864989118479136628053036007726747781947604183840,
            1157104504105078646231245030523046549707276691268406801818879672010757036877
        );                                      
        
        vk.IC[114] = Pairing.G1Point( 
            17828693791409730462284963788254135469858467319941650109584474189702927543178,
            7192921647147641476174903907912576917167293421661117475302919655201019688882
        );                                      
        
        vk.IC[115] = Pairing.G1Point( 
            12512418211785511229021513515815709206706483099952447924454668884465290127177,
            9214581585633369640748135852565447683365175568196201795534733975052479673344
        );                                      
        
        vk.IC[116] = Pairing.G1Point( 
            6591539008728213657887275062179381832607855986609457126798762444846751704196,
            11160523169564056094016626784161584669965560541526296335444489828177437745181
        );                                      
        
        vk.IC[117] = Pairing.G1Point( 
            14142917769851151674056252372016046641884643128112098649960752284339230929257,
            1387880497393586002139930184735712404933484668403610018387684447356675432321
        );                                      
        
        vk.IC[118] = Pairing.G1Point( 
            1932983965064674753716706731085985559363262830953420182411909950489489293903,
            20975199466717118560986892527389054834038759029616668094978063996023718330111
        );                                      
        
        vk.IC[119] = Pairing.G1Point( 
            1516248233770132080916815931703970888150592598967738699156427442016398096825,
            2315094725038164955092686212639039820498890778184573471015876245201565073740
        );                                      
        
        vk.IC[120] = Pairing.G1Point( 
            10778332409194357055653382387249871958207468757070459626682050241383245994358,
            8930604600947975178690935506980667625231678589447820287429287465453399067427
        );                                      
        
        vk.IC[121] = Pairing.G1Point( 
            19922330689906681793826626909431172490908614670125574127515672388467978290166,
            6178405630928327611434377323235074392081806822916140629709598810320825587412
        );                                      
        
        vk.IC[122] = Pairing.G1Point( 
            14084791479123618403924752234570332982276877987272519687034245820856458770616,
            4735998604722183710413805426891783024443926375098180670616873378320657681367
        );                                      
        
        vk.IC[123] = Pairing.G1Point( 
            17617662335823702475565072439562429304084821407980439467642138163358044822309,
            11400649048852002565810925019913592836128883025085622400177142349754792488900
        );                                      
        
        vk.IC[124] = Pairing.G1Point( 
            1815760673413452099478658399131988597289559204713282546716074521516665979791,
            6759666218878924612219760738056818492510123575510391766135225110165031213247
        );                                      
        
        vk.IC[125] = Pairing.G1Point( 
            15856714450971643227571359190507242111971408834606872151636668686593699743214,
            8797521825792777678818804759381517993443534778381641730444577475199939418043
        );                                      
        
        vk.IC[126] = Pairing.G1Point( 
            13136382270488882820504676375031913505856865883406626444924827017893957739066,
            9489065738984109704704473389675887061252951834352826630660080163629533250446
        );                                      
        
        vk.IC[127] = Pairing.G1Point( 
            6138948408784809896786470422457041586332455099205795117961223830730737318424,
            5911056953640972516540424994909975112138285138214030990989203746270725489475
        );                                      
        
        vk.IC[128] = Pairing.G1Point( 
            17796721815418344796909665750026615045832306280483779470374156088334561047180,
            16294813861583114922572116047851453552929084027642971375120122583663421161802
        );                                      
        
        vk.IC[129] = Pairing.G1Point( 
            19410799465601423523274087552279518969080687199797620964308666844724442055854,
            1983495543906898647003373709824062396983298211960799455890047979129617602453
        );                                      
        
        vk.IC[130] = Pairing.G1Point( 
            971450761975419630409859245192599104600179726864875519013965662217983366637,
            16089180110922412962897381845455271336439451960528783596175827391463816264641
        );                                      
        
    }
    function verify(uint[] memory input, Proof memory proof) internal view returns (uint) {
        uint256 snark_scalar_field = 21888242871839275222246405745257275088548364400416034343698204186575808495617;
        VerifyingKey memory vk = verifyingKey();
        require(input.length + 1 == vk.IC.length,"verifier-bad-input");
        // Compute the linear combination vk_x
        Pairing.G1Point memory vk_x = Pairing.G1Point(0, 0);
        for (uint i = 0; i < input.length; i++) {
            require(input[i] < snark_scalar_field,"verifier-gte-snark-scalar-field");
            vk_x = Pairing.addition(vk_x, Pairing.scalar_mul(vk.IC[i + 1], input[i]));
        }
        vk_x = Pairing.addition(vk_x, vk.IC[0]);
        if (!Pairing.pairingProd4(
            Pairing.negate(proof.A), proof.B,
            vk.alfa1, vk.beta2,
            vk_x, vk.gamma2,
            proof.C, vk.delta2
        )) return 1;
        return 0;
    }
    /// @return r  bool true if proof is valid
    function verifyProof(
            uint[2] memory a,
            uint[2][2] memory b,
            uint[2] memory c,
            uint256[] memory input
        ) public view returns (bool r) {
        Proof memory proof;
        proof.A = Pairing.G1Point(a[0], a[1]);
        proof.B = Pairing.G2Point([b[0][0], b[0][1]], [b[1][0], b[1][1]]);
        proof.C = Pairing.G1Point(c[0], c[1]);
        uint[] memory inputValues = new uint[](input.length);
        for(uint i = 0; i < input.length; i++){
            inputValues[i] = input[i];
        }
        if (verify(inputValues, proof) == 0) {
            return true;
        } else {
            return false;
        }
    }
}