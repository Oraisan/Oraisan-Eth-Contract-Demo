//
// Copyright 2017 Christian Reitwiessner
// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
// 2019 OKIMS
//      ported to solidity 0.6
//      fixed linter warnings
//      added requiere error messages
//
//
// SPDX-License-Identifier: GPL-3.0
pragma solidity ^0.8.0;

import "../../libs/Paring.sol";

contract VerifierValidatorSignature_110 {
    using Pairing for *;
    struct VerifyingKey {
        Pairing.G1Point alfa1;
        Pairing.G2Point beta2;
        Pairing.G2Point gamma2;
        Pairing.G2Point delta2;
        Pairing.G1Point[] IC;
    }
    struct Proof {
        Pairing.G1Point A;
        Pairing.G2Point B;
        Pairing.G1Point C;
    }

    function verifyingKey() internal pure returns (VerifyingKey memory vk) {
        vk.alfa1 = Pairing.G1Point(
            20491192805390485299153009773594534940189261866228447918068658471970481763042,
            9383485363053290200918347156157836566562967994039712273449902621266178545958
        );

        vk.beta2 = Pairing.G2Point(
            [
                4252822878758300859123897981450591353533073413197771768651442665752259397132,
                6375614351688725206403948262868962793625744043794305715222011528459656738731
            ],
            [
                21847035105528745403288232691147584728191162732299865338377159692350059136679,
                10505242626370262277552901082094356697409835680220590971873171140371331206856
            ]
        );
        vk.gamma2 = Pairing.G2Point(
            [
                11559732032986387107991004021392285783925812861821192530917403151452391805634,
                10857046999023057135944570762232829481370756359578518086990519993285655852781
            ],
            [
                4082367875863433681332203403145435568316851327593401208105741076214120093531,
                8495653923123431417604973247489272438418190587263600148770280649306958101930
            ]
        );
        vk.delta2 = Pairing.G2Point(
            [
                11559732032986387107991004021392285783925812861821192530917403151452391805634,
                10857046999023057135944570762232829481370756359578518086990519993285655852781
            ],
            [
                4082367875863433681332203403145435568316851327593401208105741076214120093531,
                8495653923123431417604973247489272438418190587263600148770280649306958101930
            ]
        );
        vk.IC = new Pairing.G1Point[](67);

        vk.IC[0] = Pairing.G1Point(
            2711087075973811469852374331669309891541582411131942750870237688113841572157,
            19741729228220133564253054185479917384326721288161235485466262342207361621491
        );

        vk.IC[1] = Pairing.G1Point(
            871293841277524461267092595516649129757294542813242469681765766442874248965,
            1730263189485580533587745891459051056910107676230097161005073301437355440130
        );

        vk.IC[2] = Pairing.G1Point(
            18959784841524706122068251270921075931271138423748903725230248274728028807670,
            7553551994382722282556484214688840737452331657216146366981759899012083564020
        );

        vk.IC[3] = Pairing.G1Point(
            19301481830260600726443590895597701869718280628712337243569619676562513867247,
            11232315315488009364721922654046446227388143387303249648596371211166951728079
        );

        vk.IC[4] = Pairing.G1Point(
            15705358148425725221156331860989714060689272397259052353063679784569381496506,
            6840624729082882038420219813250296144371223638471158436925044370361745160435
        );

        vk.IC[5] = Pairing.G1Point(
            12350860751479032408891072363434741758006559867228055118002393135471575548929,
            14856967833522136500596669578945862962104489382243075684651110584541940722080
        );

        vk.IC[6] = Pairing.G1Point(
            9020670490965990292962701478101100675396894249886449373100404385206471682354,
            20184495386359738314651526545548497215381312858595850635162639433999094500468
        );

        vk.IC[7] = Pairing.G1Point(
            19410090276230926352069668034925482992336302565485534329426302901467914096560,
            2278680393568575789080188113827681699824634388190133159960101175508004630417
        );

        vk.IC[8] = Pairing.G1Point(
            21042174383401845560469451766911439637193060244406978551095545691064261291141,
            9633872307479800788282760725646854858070121051128138970961796921796620899903
        );

        vk.IC[9] = Pairing.G1Point(
            18761288750879876268571369361408584249830138324477978372514972532002092394357,
            12170194263346368810238510398479025546816025667669311746200429991201764008431
        );

        vk.IC[10] = Pairing.G1Point(
            16767578708369710701304873962618174087399246261401152239383598130699422376976,
            20897675861436673030652357030938183179429210667689879473605403009305218684939
        );

        vk.IC[11] = Pairing.G1Point(
            8438966223478037237254322692547759576440905297770770681732649002143950725675,
            10405138827238918060393444823473868276776688973793231836558811669836937799064
        );

        vk.IC[12] = Pairing.G1Point(
            2142802232433006327456615286832128174822394377034933159456517590887635685950,
            1823932542915233020711173047100010537735381484040902868510432920121890509562
        );

        vk.IC[13] = Pairing.G1Point(
            14282855396445700245335829387366520517740173178670182426132856281311587850986,
            14961778041419832503135257658774031191915202270925670882278826833443065118241
        );

        vk.IC[14] = Pairing.G1Point(
            13203535066006225476123737937597671039924438929920973740093726039787400363626,
            18328010809966634759709055491252135470815510135364018965520326953890249562246
        );

        vk.IC[15] = Pairing.G1Point(
            17567553975617514101953531236233884358115748150513720324724940182254176317341,
            15991816033133306592308256879706774882882289949035069515813139915013122173453
        );

        vk.IC[16] = Pairing.G1Point(
            11035457706056801635871949318274267084638219029309580639370838532487154102539,
            4787789569391906856584069519049686791571780961300541838336650217397719239610
        );

        vk.IC[17] = Pairing.G1Point(
            2376392703007840396178176576108527296665746048759771559080578143841324263815,
            6913775533594147851345866325267852253881675524066687299926668268053290865286
        );

        vk.IC[18] = Pairing.G1Point(
            16864996263594135473921730720005198394628195454649121552488951806440442484828,
            2377061706776877287502383705143013300462927493279636491255512763989355418351
        );

        vk.IC[19] = Pairing.G1Point(
            4739206444245515512594006964141163300567416543051430782334668931970666685220,
            17582798503924959792400608618755414372187658641127436702342555649442070036760
        );

        vk.IC[20] = Pairing.G1Point(
            14349353240857565173454421113543188697448193164010391847631618560810430312609,
            21851919538423689929804320782198017271004793272302565322427452010709373020729
        );

        vk.IC[21] = Pairing.G1Point(
            3084312775557445659385033531803149894210667714161394526602355418993518605201,
            10638798750223329134905291038218450665186255058219520291994220518192422250036
        );

        vk.IC[22] = Pairing.G1Point(
            9115155293406898603617668587847540498159518262902666624335420295556283836206,
            1967902722027679636837604438861225740901584494810060307979694029636297780774
        );

        vk.IC[23] = Pairing.G1Point(
            14277013191092062067696174437271634082413178644919686558482181108326158009601,
            215477377785632852304857902822529151355371674394960159233635798372984693826
        );

        vk.IC[24] = Pairing.G1Point(
            6260519969059633119507767536394532683716789939606155994305000456417281458719,
            4179504932777232542185036512805947774358393151723544614901187423299007280147
        );

        vk.IC[25] = Pairing.G1Point(
            3091265169651726326776807789453874405347168443254400346198560280823727097532,
            2988974597271875301829924305391203270157988108465337254019689181161785832900
        );

        vk.IC[26] = Pairing.G1Point(
            21232529230707739916129482888413309709151756454813874410891701575026115190311,
            9691785743377088448196585752106869536807248011980720386182262651100686183272
        );

        vk.IC[27] = Pairing.G1Point(
            21012252357727020071111786156612686053809924642392425362161511475124490237291,
            1834142308502288058370590105478897866999361805834334091390575207110070525131
        );

        vk.IC[28] = Pairing.G1Point(
            242526107231281104079512826432800724215356040697131890244908259688347671629,
            19253741582645705548430694176177878599698989325608214803564236635248116368199
        );

        vk.IC[29] = Pairing.G1Point(
            9935775029042120547226452582534668335108145579963840123411580846070421936834,
            6544490405050569886813120479935087826466745744838737359464790986139272889613
        );

        vk.IC[30] = Pairing.G1Point(
            4509747516036766913875448202500445105235176674845672345331487092442468005209,
            10531414792926997211329201494409395007283187144803307164504247815425631289075
        );

        vk.IC[31] = Pairing.G1Point(
            19750060327295182423997667619808622345643054021719167871137150553497246842510,
            20669659585690690961476350447687993270924958264365538611484618673030434288936
        );

        vk.IC[32] = Pairing.G1Point(
            8547734761590135897245524797713017836558466807104550236876326133098492162149,
            6389554828459022953285831436925454298133120823374840900586006578238544074840
        );

        vk.IC[33] = Pairing.G1Point(
            12626416586665994417257446806510538631062629991957519433659063112886732062080,
            14630102376608155685374893709776595090660592144190618530910169676874756315265
        );

        vk.IC[34] = Pairing.G1Point(
            1836485336188584950468159367861747679830750838941665884837689156596126340175,
            1029442623608605755880611479409013139053395093664910363672225067380905316285
        );

        vk.IC[35] = Pairing.G1Point(
            9315842116482462477888318171155954776308496757962297316537442621527265138985,
            10625468964112792026099649785906081111542146269832461261220929022402608694559
        );

        vk.IC[36] = Pairing.G1Point(
            18264248348151131103775613818292663862582758830572290971184749892933585950601,
            16779115294385170039119906794164190708735594507283632702921251114633525816952
        );

        vk.IC[37] = Pairing.G1Point(
            17549585627895187050012073725210278023942232674285461482332460016155151906858,
            21027392387039517964521989944379517394399984241325546053690121131224229393365
        );

        vk.IC[38] = Pairing.G1Point(
            9876919457400355346763228800103553445566124260637597550486170320405393468124,
            6251406249423676297825093000173068426780315385683405587345246080671319717711
        );

        vk.IC[39] = Pairing.G1Point(
            11423230327999802499228818967507567531456896922105176360943276844967354375021,
            20815628646714221595068216215973230209205285006560276573127509187285744176826
        );

        vk.IC[40] = Pairing.G1Point(
            2864742100819989271874622752682187451948491359465275272399274346133686189076,
            3961869942584948445753853550919272184179416906727891222429863699345998771661
        );

        vk.IC[41] = Pairing.G1Point(
            7592797383919318604528197663502031945685996560774214475388074240611305210267,
            2118941763543832855246667386525075519016345540565176385174576875614106494054
        );

        vk.IC[42] = Pairing.G1Point(
            18652524604800095827558262870390179297923428389737650886611250007051750812997,
            11277520039577271396146576719386853031893426930127968382757994126006820570947
        );

        vk.IC[43] = Pairing.G1Point(
            9611136311899093935597234358314045862989210044931688346794296035072600822206,
            842602136985160217673042079276891249574813549696796719942236264440654522279
        );

        vk.IC[44] = Pairing.G1Point(
            9404585088226349941591952908109576475563767816664682890678314856739017277408,
            6289151367413771233970349316051600492967728996179982875681060395698466994211
        );

        vk.IC[45] = Pairing.G1Point(
            15011932497431236153810644406922317323879749453172566838452285519393684948734,
            16427193941311562990760143765690097489116882696719089690890679675726672017806
        );

        vk.IC[46] = Pairing.G1Point(
            16849075303473333506729574174880808103888800088894937637251369101977054213915,
            1479219440453696229311771711768411870549777180118614815313597474925962119615
        );

        vk.IC[47] = Pairing.G1Point(
            11205626920568034057247229119211866472173297978380466884845685444351904620292,
            11286314616950334521255560598469273116326728244669477272323069593477556029688
        );

        vk.IC[48] = Pairing.G1Point(
            9891855102793425054653226422198894118132364883191656133150079172864613512744,
            12217186674334723759895492272035410552176789008148156757826835972299585390312
        );

        vk.IC[49] = Pairing.G1Point(
            12693585203297593687137745866065957537315472568221580805836420312691748708533,
            70323408382706964014998258496847412046448887743859550270071447143948317979
        );

        vk.IC[50] = Pairing.G1Point(
            12545299936158373051140332626189339290608703396016698655075136560836661117222,
            7864059341422795011150511743081220645577346726043702082746415105868682148166
        );

        vk.IC[51] = Pairing.G1Point(
            5906246424959408444414002984076118859124332602169180541616989117550671002561,
            3585075234221546979686673208393856506575027898039385491208505236930372547394
        );

        vk.IC[52] = Pairing.G1Point(
            13774547440288576298214234426425473014875404429144714803798481194351724841660,
            6961013119878585368501919942534069219010105792794796646403182461264633920378
        );

        vk.IC[53] = Pairing.G1Point(
            15955234284535406112176725215771254860137103276359587640150924688959163642613,
            11668515831941979700459046696572119632584930278463349961669672801951535556027
        );

        vk.IC[54] = Pairing.G1Point(
            6570246717739992583679841229072563570561964753120840337557550157936554423821,
            7408153558305252078111448732652359992892612425725631356812236141850141191780
        );

        vk.IC[55] = Pairing.G1Point(
            9570512252599631232278566830655357751324727723215434106668773467433497392120,
            4087179949644018376024487018161383041353258466681875490304979086946344942745
        );

        vk.IC[56] = Pairing.G1Point(
            17827739178102550289026843605553251063213726318812862947911868018173432204829,
            21563459862158535342480589375675281482102181735617630433803668392202833629257
        );

        vk.IC[57] = Pairing.G1Point(
            608736335165964609512381950964622887674455737029230541215830256920132860345,
            14554195666586662266868075890626674874185283017473007475677426132043218618543
        );

        vk.IC[58] = Pairing.G1Point(
            10493853170742472590436976155647397801872678670048597876624592411106796191265,
            13272499343442109054131863129217078067759396030834062953286138060981938188331
        );

        vk.IC[59] = Pairing.G1Point(
            14101279480350827225050694071426490098149157548007790140927304485877389126236,
            3726487379174329543949113615971470207628971265487649168475984790543287720053
        );

        vk.IC[60] = Pairing.G1Point(
            15065654664616804266946700760314437240811938439841425681180155587935151915110,
            2197356172557990493000188448900576373274649297772558997142830817905324217805
        );

        vk.IC[61] = Pairing.G1Point(
            14794614275744840398509708673559179487206511567704896702002423975626383939205,
            8571905575063144912824488556947542485539758888953443319604157612485953117458
        );

        vk.IC[62] = Pairing.G1Point(
            20577832027986571646590918557145385394020228402109384018934223355711116315657,
            8032248136483223302136096426268790045573876729157113540997663102675186314260
        );

        vk.IC[63] = Pairing.G1Point(
            16758276805572048521027496474863397190962873853540034636049481300525042031716,
            13267714051373694661308212926776227869301574267821876830093653632259573193048
        );

        vk.IC[64] = Pairing.G1Point(
            120391151369415620556925089443832154371889720297827412057855196598964879925,
            15141912109778650091241289878997343501422229253452990369112405941363477346677
        );

        vk.IC[65] = Pairing.G1Point(
            12874381648356420560930806940790565202803551996181799371737379176918791848159,
            4589670031717477581279093249612389888073865054476432952501124552104008245432
        );

        vk.IC[66] = Pairing.G1Point(
            12762503928401199167995226207361996837043999946123640746157628787760583640804,
            3645795381350648478682402160092518972495664299794099843669392358697615709301
        );
    }

    function verify(
        uint[] memory input,
        Proof memory proof
    ) internal view returns (uint) {
        uint256 snark_scalar_field = 21888242871839275222246405745257275088548364400416034343698204186575808495617;
        VerifyingKey memory vk = verifyingKey();
        require(input.length + 1 == vk.IC.length, "verifier-bad-input");
        // Compute the linear combination vk_x
        Pairing.G1Point memory vk_x = Pairing.G1Point(0, 0);
        for (uint i = 0; i < input.length; i++) {
            require(
                input[i] < snark_scalar_field,
                "verifier-gte-snark-scalar-field"
            );
            vk_x = Pairing.addition(
                vk_x,
                Pairing.scalar_mul(vk.IC[i + 1], input[i])
            );
        }
        vk_x = Pairing.addition(vk_x, vk.IC[0]);
        if (
            !Pairing.pairingProd4(
                Pairing.negate(proof.A),
                proof.B,
                vk.alfa1,
                vk.beta2,
                vk_x,
                vk.gamma2,
                proof.C,
                vk.delta2
            )
        ) return 1;
        return 0;
    }

    /// @return r  bool true if proof is valid
    function verifyProof(
        uint[2] memory a,
        uint[2][2] memory b,
        uint[2] memory c,
        uint256[] memory input
    ) public view returns (bool r) {
        Proof memory proof;
        proof.A = Pairing.G1Point(a[0], a[1]);
        proof.B = Pairing.G2Point([b[0][0], b[0][1]], [b[1][0], b[1][1]]);
        proof.C = Pairing.G1Point(c[0], c[1]);
        uint[] memory inputValues = new uint[](input.length);
        for (uint i = 0; i < input.length; i++) {
            inputValues[i] = input[i];
        }
        if (verify(inputValues, proof) == 0) {
            return true;
        } else {
            return false;
        }
    }
}
